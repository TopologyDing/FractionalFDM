function[]=Caputo_derivative_type_three(x_or_y,type_three_num,b,i,j,direction)
    global boun_disp_gradient_x
    global boun_disp_gradient_y
    global d_x
    global d_y
    global disp_gradient_x
    global disp_gradient_y
    global out_fic_index
    global out_dir_index
    global alpha
    
    m=i;
    result_x=0;
    result_y=0;
    point_posi_x=(i-1)*d_x;
    point_posi_y=(j-1)*d_y;
    if(direction==1)
        left_posi=b(1);
        left_range=b(2);
        n=left_range+1;
        for k=1:1:n
            t_n=point_posi_x;
            t_0=left_posi;
            cur_posi_x=m-(n-k);
            if(k==1)
                if(k~=n)
                    if(k+1<n)
                        t_1=cur_posi_x*d_x;
                    elseif(k+1==n)
                        t_1=t_n;
                    end
                   coeff_1=t_n-t_1;
                   coeff_2=t_n-t_0;
                   coeff_3=t_1-t_0;
                   coeff=(coeff_1^(2-alpha)-coeff_2^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/(gamma(3-alpha)*coeff_3);
                   if(abs(coeff)<1e-15)
                       coeff=0;
                   end
                   result_x=result_x+coeff*disp_gradient_x(cur_posi_x,j,1);
                   result_y=result_y+coeff*disp_gradient_x(cur_posi_x,j,2);
                elseif(k==n)
                   result_x=result_x+disp_gradient_x_type_three(type_three_num,x_or_y,1);
                   result_y=result_y+disp_gradient_x_type_three(type_three_num,x_or_y,2);
                end
            elseif(k<n)
                t_k=(cur_posi_x-1)*d_x;
                if(k+1<n)
                    t_kplus1=(cur_posi_x)*d_x;
                elseif(k+1==n)
                    t_kplus1=t_n;
                end
                if(k-1>1)
                    t_kminus1=(cur_posi_x-2)*d_x;
                elseif(k-1==1)
                    t_kminus1=t_0;
                end
                coeff_1=t_n-t_kplus1;
                coeff_2=t_n-t_k;
                coeff_3=t_kplus1-t_k;
                coeff_4=t_n-t_kminus1;
                coeff_5=t_k-t_kminus1;
                coeff=(((coeff_1)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/coeff_3+...
                    ((coeff_4)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2-(alpha-2)*coeff_5))/coeff_5)/gamma(3-alpha);
                if(abs(coeff)<1e-15)
                    coeff=0;
                end
                result_x=result_x+coeff*disp_gradient_x(cur_posi_x,j,1);
                result_y=result_y+coeff*disp_gradient_x(cur_posi_x,j,2);
            elseif(k==n)
                if(k-1>1)
                    t_minus1=(cur_posi_x-2)*d_x;
                elseif(k-1==1)
                    t_minus1=t_0;
                end
                coeff_1=t_n-t_minus1;
                coeff=coeff_1^(1-alpha)/gamma(3-alpha);
                result_x=result_x+coeff*disp_gradient_x_type_three(type_three_num,x_or_y,1);
                result_y=result_y+coeff*disp_gradient_x_type_three(type_three_num,x_or_y,2);
            end
        end
    elseif(direction==2)
        right_posi=b(1);
        right_range=b(2);
        on_boundary=b(3);
        n=right_range+1;
        for k=1:1:n
            t_n=point_posi_x;
            t_0=right_posi;
            cur_posi_x=m+(n-k);
            if(k==1)
                if(k~=n)
                    if(k+1<n)
                        t_1=(cur_posi_x-2)*d_x;
                    elseif(k+1==n)
                        t_1=t_n;
                    end
                    coeff_1=-t_n+t_1;
                    coeff_2=-t_n+t_0;
                    coeff_3=-t_1+t_0;
                    coeff=(coeff_1^(2-alpha)-coeff_2^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/(gamma(3-alpha)*coeff_3);
                    if(abs(coeff)<1e-15)
                        coeff=0;
                    end
                    if(x_or_y==1)
                        if(on_boundary==1)
                            s=out_fic_index(cur_posi_x-1,j);
                            for r=1:1:2
                                if(out_dir_index(s,r)==1)
                                    result_x=result_x+coeff*boun_disp_gradient_x(s,r,1);
                                    result_y=result_y+coeff*boun_disp_gradient_x(s,r,2);
                                    break;
                                end
                            end
                        else
                            result_x=result_x+coeff*disp_gradient_x(cur_posi_x,j,1);
                            result_y=result_y+coeff*disp_gradient_x(cur_posi_x,j,2);
                        end
                    else
                        result_x=result_x+coeff*disp_gradient_x_type_three(type_three_num,3,1);
                        result_y=result_y+coeff*disp_gradient_x_type_three(type_three_num,3,2);
                    end
                elseif(k==n)
                    result_x=result_x+disp_gradient_x(cur_posi_x,j,1);
                    result_y=result_y+disp_gradient_x(cur_posi_x,j,2);
                end
            elseif(k<n)
                t_k=(cur_posi_x-1)*d_x;
                if(k+1<n)
                    t_kplus1=t_k-d_x;
                elseif(k+1==n)
                    t_kplus1=t_n;
                end
                if(k-1>1)
                    t_kminus1=cur_posi_x*d_x;
                elseif(k-1==1)
                    t_kminus1=t_0;
                end
                coeff_1=t_kplus1-t_n;
                coeff_2=t_k-t_n;
                coeff_3=t_k-t_kplus1;
                coeff_4=t_kminus1-t_n;
                coeff_5=t_kminus1-t_k;
                coeff=(((coeff_1)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/coeff_3+...
                    ((coeff_4)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2-(alpha-2)*coeff_5))/coeff_5)/gamma(3-alpha);
                if(abs(coeff)<1e-15)
                    coeff=0;
                end
                result_x=result_x+coeff*disp_gradient_x(cur_posi_x,j,1);
                result_y=result_y+coeff*disp_gradient_x(cur_posi_x,j,2);
            elseif(k==n)
                if(k-1>1)
                    t_minus1=(cur_posi_x)*d_x;
                elseif(k-1==1)
                    t_minus1=t_0;
                end
                coeff_1=-t_n+t_minus1;
                coeff=coeff_1^(1-alpha)/gamma(3-alpha);
                result_x=result_x+coeff*disp_gradient_x(cur_posi_x,j,1);
                result_y=result_y+coeff*disp_gradient_x(cur_posi_x,j,2);
            end
        end    
                
                
end