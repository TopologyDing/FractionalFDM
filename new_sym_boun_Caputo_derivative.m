function[results]=new_sym_boun_Caputo_derivative(a,b,global_x,global_y,direction)
    global d_x
    global d_y
    global disp_gradient_x
    global disp_gradient_y
    global alpha
    
    result_x=0;
    result_y=0;
    point_posi_x=a(1);
    point_posi_y=a(2);
    point_posi_dir=a(3);
    if(direction==1)
        left_posi=b(1);
        left_range=b(2);
        n=left_range+1;
        for k=1:1:n
            t_n=point_posi_x;
            t_0=left_posi;
            if(point_posi_dir==1)
                cur_posi_x=ceil(point_posi_x/d_x)+1-(n-k);
            else
                cur_posi_x=global_x-(n-k);
            end
            if(k==1)
                if(k~=n)
                    if(k+1<n)
                        t_1=cur_posi_x*d_x;
                    elseif(k+1==n)
                        t_1=t_n;
                    end
                   coeff_1=t_n-t_1;
                   coeff_2=t_n-t_0;
                   coeff_3=t_1-t_0;
                   coeff=(coeff_1^(2-alpha)-coeff_2^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/(gamma(3-alpha)*coeff_3);
                   if(abs(coeff)<1e-15)
                       coeff=0;
                   end
                   %if boundary point on x direction
                   if(point_posi_dir==1)
                       deri_point_left=point_deri_with_one_coord_online(left_posi,global_y,1,2);
                   %if boundary point on y direction
                   elseif(point_posi_dir==2)
                       posi(1)=left_posi;
                       posi(2)=point_posi_y;
                       deri_point_left=random_point_derivative(posi,1);
                   end
                   result_x=result_x+coeff*deri_point_left(1);
                   result_y=result_y+coeff*deri_point_left(2);
                elseif(k==n)
                   %if boundary point on x direction
                   if(point_posi_dir==1)
                       deri_point_left=point_deri_with_one_coord_online(left_posi,global_y,1,2);
                   %if boundary point on y direction
                   elseif(point_posi_dir==2)
                       posi(1)=left_posi;
                       posi(2)=point_posi_y;
                       deri_point_left=random_point_derivative(posi,1);
                   end
                   result_x=result_x+deri_point_left(1);
                   result_y=result_y+deri_point_left(2);
                end
            elseif(k<n)
                t_k=(cur_posi_x-1)*d_x;
                if(k+1<n)
                    t_kplus1=(cur_posi_x)*d_x;
                elseif(k+1==n)
                    t_kplus1=t_n;
                end
                if(k-1>1)
                    t_kminus1=(cur_posi_x-2)*d_x;
                elseif(k-1==1)
                    t_kminus1=t_0;
                end
                coeff_1=t_n-t_kplus1;
                coeff_2=t_n-t_k;
                coeff_3=t_kplus1-t_k;
                coeff_4=t_n-t_kminus1;
                coeff_5=t_k-t_kminus1;
                coeff=(((coeff_1)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/coeff_3+...
                    ((coeff_4)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2-(alpha-2)*coeff_5))/coeff_5)/gamma(3-alpha);
                if(abs(coeff)<1e-15)
                    coeff=0;
                end
                if(point_posi_dir==1)
                    result_x=result_x+coeff*disp_gradient_x(cur_posi_x,global_y,1);
                    result_y=result_y+coeff*disp_gradient_x(cur_posi_x,global_y,2);
                elseif(point_posi_dir==2)
                    posi(1)=t_k;
                    posi(2)=point_posi_y;
                    deri_point_left=random_point_derivative(posi,1);
                    result_x=result_x+coeff*deri_point_left(1);
                    result_y=result_y+coeff*deri_point_left(2);
                end
            elseif(k==n)
                if(k-1>1)
                    t_minus1=(cur_posi_x-2)*d_x;
                elseif(k-1==1)
                    t_minus1=t_0;
                end
                coeff_1=t_n-t_minus1;
                coeff=coeff_1^(1-alpha)/gamma(3-alpha);
                %if boundary point on x direction
                if(point_posi_dir==1)
                    deri_point_left=point_deri_with_one_coord_online(point_posi_x,global_y,1,2);
                %if boundary point on y direction
                elseif(point_posi_dir==2)
                    posi(1)=point_posi_x;
                    posi(2)=point_posi_y;
                    deri_point_left=random_point_derivative(posi,1);
                end
                result_x=result_x+coeff*deri_point_left(1);
                result_y=result_y+coeff*deri_point_left(2);
            end
        end
    elseif(direction==2)
        right_posi=b(1);
        right_range=b(2);
        n=right_range+1;
        for k=1:1:n
            t_n=point_posi_x;
            t_0=right_posi;
            if(point_posi_dir==1)
                cur_posi_x=floor(point_posi_x/d_x)+1+(n-k);
            else
                cur_posi_x=global_x+(n-k);
            end
            if(k==1)
                if(k~=n)
                    if(k+1<n)
                        t_1=(cur_posi_x-2)*d_x;
                    elseif(k+1==n)
                        t_1=t_n;
                    end
                    coeff_1=-t_n+t_1;
                    coeff_2=-t_n+t_0;
                    coeff_3=-t_1+t_0;
                    coeff=(coeff_1^(2-alpha)-coeff_2^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/(gamma(3-alpha)*coeff_3);
                    if(abs(coeff)<1e-15)
                        coeff=0;
                    end
                    %if boundary point on x direction
                    if(point_posi_dir==1)
                        deri_point_right=point_deri_with_one_coord_online(right_posi,global_y,1,2);
                    %if boundary point on y direction
                    elseif(point_posi_dir==2)
                        posi(1)=right_posi;
                        posi(2)=point_posi_y;
                        deri_point_right=random_point_derivative(posi,1);
                    end
                    result_x=result_x+coeff*deri_point_right(1);
                    result_y=result_y+coeff*deri_point_right(2);
                elseif(k==n)
                    %if boundary point on x direction
                    if(point_posi_dir==1)
                        deri_point_right=point_deri_with_one_coord_online(right_posi,global_y,1,2);
                    %if boundary point on y direction
                    elseif(point_posi_dir==2)
                        posi(1)=right_posi;
                        posi(2)=point_posi_y;
                        deri_point_right=random_point_derivative(posi,1);
                    end
                    result_x=result_x+deri_point_right(1);
                    result_y=result_y+deri_point_right(2);
                end
            elseif(k<n)
                t_k=(cur_posi_x-1)*d_x;
                if(k+1<n)
                    t_kplus1=t_k-d_x;
                elseif(k+1==n)
                    t_kplus1=t_n;
                end
                if(k-1>1)
                    t_kminus1=cur_posi_x*d_x;
                elseif(k-1==1)
                    t_kminus1=t_0;
                end
                coeff_1=t_kplus1-t_n;
                coeff_2=t_k-t_n;
                coeff_3=t_k-t_kplus1;
                coeff_4=t_kminus1-t_n;
                coeff_5=t_kminus1-t_k;
                coeff=(((coeff_1)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/coeff_3+...
                    ((coeff_4)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2-(alpha-2)*coeff_5))/coeff_5)/gamma(3-alpha);
                if(abs(coeff)<1e-15)
                    coeff=0;
                end
                if(point_posi_dir==1)
                    result_x=result_x+coeff*disp_gradient_x(cur_posi_x,global_y,1);
                    result_y=result_y+coeff*disp_gradient_x(cur_posi_x,global_y,2);
                elseif(point_posi_dir==2)
                    posi(1)=t_k;
                    posi(2)=point_posi_y;
                    deri_point_right=random_point_derivative(posi,1);
                    result_x=result_x+coeff*deri_point_right(1);
                    result_y=result_y+coeff*deri_point_right(2);
                end
            elseif(k==n)
                if(k-1>1)
                    t_minus1=(cur_posi_x)*d_x;
                elseif(k-1==1)
                    t_minus1=t_0;
                end
                coeff_1=-t_n+t_minus1;
                coeff=coeff_1^(1-alpha)/gamma(3-alpha);
                %if boundary point on x direction
                if(point_posi_dir==1)
                    deri_point_right=point_deri_with_one_coord_online(point_posi_x,global_y,1,2);
                %if boundary point on y direction
                elseif(point_posi_dir==2)
                    posi(1)=point_posi_x;
                    posi(2)=point_posi_y;
                    deri_point_right=random_point_derivative(posi,1);
                end
                result_x=result_x+coeff*deri_point_right(1);
                result_y=result_y+coeff*deri_point_right(2);
            end
        end
    elseif(direction==3)
        down_posi=b(1);
        down_range=b(2);
        n=down_range+1;
        for k=1:1:n
            t_n=point_posi_y;
            t_0=down_posi;
            if(point_posi_dir==2)
                cur_posi_y=ceil(point_posi_y/d_y)+1-(n-k);
            else
                cur_posi_y=global_y-(n-k);
            end
            if(k==1)
                if(k~=n)
                    if(k+1<n)
                        t_1=cur_posi_y*d_y;
                    elseif(k+1==n)
                        t_1=t_n;
                    end
                    coeff_1=t_n-t_1;
                    coeff_2=t_n-t_0;
                    coeff_3=t_1-t_0;
                    coeff=(coeff_1^(2-alpha)-coeff_2^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/(gamma(3-alpha)*coeff_3);
                    if(abs(coeff)<1e-15)
                        coeff=0;
                    end
                    if(point_posi_dir==1)
                        posi(1)=point_posi_x;
                        posi(2)=down_posi;
                        deri_point_down=random_point_derivative(posi,2);
                    elseif(point_posi_dir==2)
                        deri_point_down=point_deri_with_one_coord_online(down_posi,global_x,2,1);
                    end
                    result_x=result_x+coeff*deri_point_down(1);
                    result_y=result_y+coeff*deri_point_down(2);
                elseif(k==n)
                    if(point_posi_dir==1)
                        posi(1)=point_posi_x;
                        posi(2)=down_posi;
                        deri_point_down=random_point_derivative(posi,2);
                    elseif(point_posi_dir==2)
                        deri_point_down=point_deri_with_one_coord_online(down_posi,global_x,2,1);
                    end
                    result_x=result_x+deri_point_down(1);
                    result_y=result_y+deri_point_down(2);
                end
            elseif(k<n)
                t_k=(cur_posi_y-1)*d_y;
                if(k+1<n)
                    t_kplus1=t_k+d_y;
                elseif(k+1==n)
                    t_kplus1=t_n;
                end
                if(k-1>1)
                    t_kminus1=(cur_posi_y-2)*d_y;
                elseif(k-1==1)
                    t_kminus1=t_0;
                end
                coeff_1=t_n-t_kplus1;
                coeff_2=t_n-t_k;
                coeff_3=t_kplus1-t_k;
                coeff_4=t_n-t_kminus1;
                coeff_5=t_k-t_kminus1;
                coeff=(((coeff_1)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/coeff_3+...
                    ((coeff_4)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2-(alpha-2)*coeff_5))/coeff_5)/gamma(3-alpha);
                if(abs(coeff)<1e-15)
                    coeff=0;
                end
                if(point_posi_dir==2)
                    result_x=result_x+coeff*disp_gradient_y(global_x,cur_posi_y,1);
                    result_y=result_y+coeff*disp_gradient_y(global_x,cur_posi_y,2);
                elseif(point_posi_dir==1)
                    posi(1)=point_posi_x;
                    posi(2)=t_k;
                    deri_point_down=random_point_derivative(posi,2);
                    result_x=result_x+coeff*deri_point_down(1);
                    result_y=result_y+coeff*deri_point_down(2);
                end
            elseif(k==n)
                if(k-1>1)
                    t_minus1=(cur_posi_y-2)*d_y;
                elseif(k-1==1)
                    t_minus1=t_0;
                end
                coeff_1=t_n-t_minus1;
                coeff=coeff_1^(1-alpha)/gamma(3-alpha);
                if(point_posi_dir==1)
                    posi(1)=point_posi_x;
                    posi(2)=point_posi_y;
                    deri_point_down=random_point_derivative(posi,2);
                elseif(point_posi_dir==2)
                    deri_point_down=point_deri_with_one_coord_online(point_posi_y,global_x,2,1);
                end
                result_x=result_x+coeff*deri_point_down(1);
                result_y=result_y+coeff*deri_point_down(2);
            end
        end
    elseif(direction==4)
        upper_posi=b(1);
        upper_range=b(2);
        n=upper_range+1;
        for k=1:1:n
            t_0=upper_posi;
            t_n=point_posi_y;
            if(point_posi_dir==2)
                cur_posi_y=floor(point_posi_y/d_y)+1+(n-k);
            else
                cur_posi_y=global_y+(n-k);
            end
            if(k==1)
                if(k~=n)
                    if(k+1<n)
                        t_1=(cur_posi_y-2)*d_y;
                    elseif(k+1==n)
                        t_1=t_n;
                    end
                    coeff_1=-t_n+t_1;
                    coeff_2=-t_n+t_0;
                    coeff_3=-t_1+t_0;
                    coeff=(coeff_1^(2-alpha)-coeff_2^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/(gamma(3-alpha)*coeff_3);
                    if(abs(coeff)<1e-15)
                        coeff=0;
                    end
                    if(point_posi_dir==1)
                        posi(1)=point_posi_x;
                        posi(2)=upper_posi;
                        deri_point_upper=random_point_derivative(posi,2);
                    elseif(point_posi_dir==2)
                        deri_point_upper=point_deri_with_one_coord_online(upper_posi,global_x,2,1);
                    end
                    result_x=result_x+coeff*deri_point_upper(1);
                    result_y=result_y+coeff*deri_point_upper(2);
                elseif(k==n)
                    if(point_posi_dir==1)
                        posi(1)=point_posi_x;
                        posi(2)=upper_posi;
                        deri_point_upper=random_point_derivative(posi,2);
                    elseif(point_posi_dir==2)
                        deri_point_upper=point_deri_with_one_coord_online(upper_posi,global_x,2,1);
                    end
                    result_x=result_x+deri_point_upper(1);
                    result_y=result_y+deri_point_upper(2);
                end
            elseif(k<n)
                t_k=(cur_posi_y-1)*d_y;
                if(k+1<n)
                    t_kplus1=(cur_posi_y-2)*d_y;
                elseif(k+1==n)
                    t_kplus1=t_n;
                end
                if(k-1>1)
                    t_kminus1=(cur_posi_y)*d_y;
                elseif(k-1==1)
                    t_kminus1=t_0;
                end
                coeff_1=-t_n+t_kplus1;
                coeff_2=-t_n+t_k;
                coeff_3=-t_kplus1+t_k;
                coeff_4=-t_n+t_kminus1;
                coeff_5=-t_k+t_kminus1;
                coeff=(((coeff_1)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2+(alpha-2)*coeff_3))/coeff_3+...
                    ((coeff_4)^(2-alpha)-(coeff_2)^(1-alpha)*(coeff_2-(alpha-2)*coeff_5))/coeff_5)/gamma(3-alpha);
                if(abs(coeff)<1e-15)
                    coeff=0;
                end
                if(point_posi_dir==1)
                    posi(1)=point_posi_x;
                    posi(2)=t_k;
                    deri_point_upper=random_point_derivative(posi,2);
                    result_x=result_x+coeff*deri_point_upper(1);
                    result_y=result_y+coeff*deri_point_upper(2);
                elseif(point_posi_dir==2)
                    result_x=result_x+coeff*disp_gradient_y(global_x,cur_posi_y,1);
                    result_y=result_y+coeff*disp_gradient_y(global_x,cur_posi_y,2);
                end
            elseif(k==n)
                if((k-1)>1)
                    t_minus1=cur_posi_y*d_y;
                elseif(k-1==1)
                    t_minus1=t_0;
                end
                coeff_1=-t_n+t_minus1;
                coeff=coeff_1^(1-alpha)/gamma(3-alpha);
                if(point_posi_dir==1)
                    posi(1)=point_posi_x;
                    posi(2)=point_posi_y;
                    deri_point_upper=random_point_derivative(posi,2);
                elseif(point_posi_dir==2)
                    deri_point_upper=point_deri_with_one_coord_online(point_posi_y,global_x,2,1);
                end
                result_x=result_x+coeff*deri_point_upper(1);
                result_y=result_y+coeff*deri_point_upper(2);
            end
        end
    end
    results(1)=result_x;
    results(2)=result_y;
end